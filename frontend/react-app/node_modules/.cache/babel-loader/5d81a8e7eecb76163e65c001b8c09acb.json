{"ast":null,"code":"var _jsxFileName = \"/home/jackculley/VSCode/machineLearningPrac/frontend/react-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App'; //import * as serviceWorker from './serviceWorker';\n\nimport { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\nimport authReducer from './store/authReducer'; //import { localStorage } from 'redux-storage';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducer = combineReducers({\n  auth: authReducer\n}); // Using Combine Reducers here although only one reducer is present.\n// Official explaination here: https://react-redux.js.org/using-react-redux/connect-mapstate#mapstatetoprops-will-not-run-if-the-store-state-is-the-same\n\nconst store = configureStore({\n  reducer\n}); // We are using thunk, because it allows delaying the dispatch actions\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this)); //checkout serviceWorker\n//serviceWorker.unregister();","map":{"version":3,"names":["React","ReactDOM","App","combineReducers","configureStore","Provider","authReducer","reducer","auth","store","root","createRoot","document","getElementById","render"],"sources":["/home/jackculley/VSCode/machineLearningPrac/frontend/react-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nimport { combineReducers } from 'redux';\nimport {configureStore} from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\nimport authReducer from './store/authReducer';\n//import { localStorage } from 'redux-storage';\n\nconst reducer = combineReducers({ auth: authReducer }); // Using Combine Reducers here although only one reducer is present.\n// Official explaination here: https://react-redux.js.org/using-react-redux/connect-mapstate#mapstatetoprops-will-not-run-if-the-store-state-is-the-same\nconst store = configureStore({reducer}); // We are using thunk, because it allows delaying the dispatch actions\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n);\n\n//checkout serviceWorker\n//serviceWorker.unregister();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AAEA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,qBAAxB,C,CACA;;;AAEA,MAAMC,OAAO,GAAGJ,eAAe,CAAC;EAAEK,IAAI,EAAEF;AAAR,CAAD,CAA/B,C,CAAwD;AACxD;;AACA,MAAMG,KAAK,GAAGL,cAAc,CAAC;EAACG;AAAD,CAAD,CAA5B,C,CAAyC;;AAEzC,MAAMG,IAAI,GAAGT,QAAQ,CAACU,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,QAAD;IAAU,KAAK,EAAEL,KAAjB;IAAA,uBACE,QAAC,GAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAQA;AACA"},"metadata":{},"sourceType":"module"}