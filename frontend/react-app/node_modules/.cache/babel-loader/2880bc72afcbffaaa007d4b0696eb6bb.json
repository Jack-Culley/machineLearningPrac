{"ast":null,"code":"import * as actionTypes from './authActionTypes'; // ########################################################\n// Initial State\n// ########################################################\n\nexport const initialState = {\n  error: null,\n  loading: false,\n  token: null\n}; // ########################################################\n// A simple function to update the state with new values\n// ########################################################\n\nconst updateObject = (oldObject, updatedProperties) => {\n  return { ...oldObject,\n    ...updatedProperties\n  };\n}; // ########################################################\n// Different Reducer Functions which change the store state\n// ########################################################\n\n\nconst authStartReducer = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    loading: true\n  });\n};\n\nconst authSuccessReducer = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    loading: false,\n    token: action.token\n  });\n};\n\nconst authFailReducer = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst authLogoutReducer = (state, action) => {\n  return updateObject(state, {\n    token: null\n  });\n}; // ########################################################\n// The Main Reducer \n// ########################################################\n\n\nconst Reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStartReducer(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccessReducer(state, action);\n\n    case actionTypes.AUTH_FAIL:\n      return authFailReducer(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogoutReducer(state, action);\n\n    default:\n      return state;\n  }\n};\n\n_c = Reducer;\nexport default Reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"names":["actionTypes","initialState","error","loading","token","updateObject","oldObject","updatedProperties","authStartReducer","state","action","authSuccessReducer","authFailReducer","authLogoutReducer","Reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT"],"sources":["/home/jackculley/VSCode/machineLearningPrac/frontend/react-app/src/store/authReducer.js"],"sourcesContent":["import * as actionTypes from './authActionTypes';\n\n// ########################################################\n// Initial State\n// ########################################################\n\nexport const initialState = {\n    error: null, \n    loading: false,\n    token: null\n}\n\n// ########################################################\n// A simple function to update the state with new values\n// ########################################################\n\nconst updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}\n\n// ########################################################\n// Different Reducer Functions which change the store state\n// ########################################################\nconst authStartReducer = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: true,\n    });\n}\n\nconst authSuccessReducer = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: false,\n        token: action.token\n    });\n}\n\nconst authFailReducer = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    });\n}\n\nconst authLogoutReducer = (state, action) => {\n    return updateObject(state, {\n        token: null\n    });\n}\n\n// ########################################################\n// The Main Reducer \n// ########################################################\n\nconst Reducer = (state=initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: return authStartReducer(state, action);\n        case actionTypes.AUTH_SUCCESS: return authSuccessReducer(state, action);\n        case actionTypes.AUTH_FAIL: return authFailReducer(state, action);\n        case actionTypes.AUTH_LOGOUT: return authLogoutReducer(state, action);\n        default:\n            return state;\n    }\n}\n\nexport default Reducer\n"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B,C,CAEA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;EACxBC,KAAK,EAAE,IADiB;EAExBC,OAAO,EAAE,KAFe;EAGxBC,KAAK,EAAE;AAHiB,CAArB,C,CAMP;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAACC,SAAD,EAAYC,iBAAZ,KAAkC;EACnD,OAAO,EACH,GAAGD,SADA;IAEH,GAAGC;EAFA,CAAP;AAIH,CALD,C,CAOA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACxC,OAAOL,YAAY,CAACI,KAAD,EAAQ;IACvBP,KAAK,EAAE,IADgB;IAEvBC,OAAO,EAAE;EAFc,CAAR,CAAnB;AAIH,CALD;;AAOA,MAAMQ,kBAAkB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;EAC1C,OAAOL,YAAY,CAACI,KAAD,EAAQ;IACvBP,KAAK,EAAE,IADgB;IAEvBC,OAAO,EAAE,KAFc;IAGvBC,KAAK,EAAEM,MAAM,CAACN;EAHS,CAAR,CAAnB;AAKH,CAND;;AAQA,MAAMQ,eAAe,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;EACvC,OAAOL,YAAY,CAACI,KAAD,EAAQ;IACvBP,KAAK,EAAEQ,MAAM,CAACR,KADS;IAEvBC,OAAO,EAAE;EAFc,CAAR,CAAnB;AAIH,CALD;;AAOA,MAAMU,iBAAiB,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;EACzC,OAAOL,YAAY,CAACI,KAAD,EAAQ;IACvBL,KAAK,EAAE;EADgB,CAAR,CAAnB;AAGH,CAJD,C,CAMA;AACA;AACA;;;AAEA,MAAMU,OAAO,GAAG,YAAgC;EAAA,IAA/BL,KAA+B,uEAAzBR,YAAyB;EAAA,IAAXS,MAAW;;EAC5C,QAAQA,MAAM,CAACK,IAAf;IACI,KAAKf,WAAW,CAACgB,UAAjB;MAA6B,OAAOR,gBAAgB,CAACC,KAAD,EAAQC,MAAR,CAAvB;;IAC7B,KAAKV,WAAW,CAACiB,YAAjB;MAA+B,OAAON,kBAAkB,CAACF,KAAD,EAAQC,MAAR,CAAzB;;IAC/B,KAAKV,WAAW,CAACkB,SAAjB;MAA4B,OAAON,eAAe,CAACH,KAAD,EAAQC,MAAR,CAAtB;;IAC5B,KAAKV,WAAW,CAACmB,WAAjB;MAA8B,OAAON,iBAAiB,CAACJ,KAAD,EAAQC,MAAR,CAAxB;;IAC9B;MACI,OAAOD,KAAP;EANR;AAQH,CATD;;KAAMK,O;AAWN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}