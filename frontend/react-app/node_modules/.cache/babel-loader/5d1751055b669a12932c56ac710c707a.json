{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './authActionTypes';\nimport * as settings from '../settings';\nimport { useDispatch } from 'react-redux';\nconst SESSION_DURATION = settings.SESSION_DURATION; // ########################################################\n// ########################################################\n// Contains Auth Action Functions. These perform two kinds of things:\n// 1) Return Action Objects\n// a) Simply Return an Action Object\n// b) Perform some action and then return an Action Objet\n// 2) Return A Dispatch(Action) combination\n// a)Perform an action then return a Dispatch(Action) combination. \n// This Dispatch(Action) could be used by some other function to dispatch action to the store      \n// ########################################################\n// ########################################################\n// ########################################################\n// ########################################################\n// Auth Action Functions returning Action Objects\n// ########################################################\n// ########################################################\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const authLogout = () => {\n  const token = localStorage.getItem('token');\n\n  if (token === undefined || token === null) {\n    localStorage.removeItem('expirationDate');\n  } else {\n    axios.post(`${settings.API_SERVER}/api/auth/logout/`, {}, {\n      headers: {\n        'Authorization': `Token ${token}`\n      }\n    }).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n  }\n\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n}; // ########################################################\n// ########################################################\n// Auth Action Functions returning A Dispatch(Action) combination after performing some action\n// ########################################################\n// ########################################################\n// This sets a timer, which would automatically logout the user after a specified time\n\nexport const authCheckTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, expirationTime);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(`${settings.API_SERVER}/api/auth/login/`, {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + SESSION_DURATION);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(authCheckTimeout(SESSION_DURATION));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(authLogout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(authLogout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(authCheckTimeout(expirationDate.getTime() - new Date().getTime()));\n      }\n    }\n  };\n};","map":{"version":3,"names":["axios","actionTypes","settings","useDispatch","SESSION_DURATION","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","authLogout","localStorage","getItem","undefined","removeItem","post","API_SERVER","headers","then","res","console","log","catch","err","AUTH_LOGOUT","authCheckTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","data","key","expirationDate","Date","getTime","setItem","authCheckState"],"sources":["/home/jackculley/VSCode/machineLearningPrac/frontend/react-app/src/store/authActions.js"],"sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './authActionTypes';\nimport * as settings from '../settings';\nimport { useDispatch } from 'react-redux';\n\nconst SESSION_DURATION = settings.SESSION_DURATION\n\n// ########################################################\n// ########################################################\n// Contains Auth Action Functions. These perform two kinds of things:\n// 1) Return Action Objects\n    // a) Simply Return an Action Object\n    // b) Perform some action and then return an Action Objet\n// 2) Return A Dispatch(Action) combination\n    // a)Perform an action then return a Dispatch(Action) combination. \n        // This Dispatch(Action) could be used by some other function to dispatch action to the store      \n// ########################################################\n// ########################################################\n\n\n// ########################################################\n// ########################################################\n// Auth Action Functions returning Action Objects\n// ########################################################\n// ########################################################\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    }\n}\n\nexport const authFail = error => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const authLogout = () => {\n    const token = localStorage.getItem('token');\n    if (token === undefined || token === null){\n        localStorage.removeItem('expirationDate');\n    } else {\n        axios.post(`${settings.API_SERVER}/api/auth/logout/`, {\n        }, {headers: {'Authorization': `Token ${token}`}} ).then(res => {console.log(res)}).catch(err => {console.log(err)});\n        localStorage.removeItem('token');\n        localStorage.removeItem('expirationDate');\n    }\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\n// ########################################################\n// ########################################################\n// Auth Action Functions returning A Dispatch(Action) combination after performing some action\n// ########################################################\n// ########################################################\n\n// This sets a timer, which would automatically logout the user after a specified time\nexport const authCheckTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(authLogout());\n        }, expirationTime)\n    }\n}\n\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post(`${settings.API_SERVER}/api/auth/login/`, {\n            username: username,\n            password: password\n        })\n        .then(res => {\n            const token = res.data.key;\n            const expirationDate = new Date(new Date().getTime() + SESSION_DURATION );\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(authSuccess(token));\n            dispatch(authCheckTimeout(SESSION_DURATION));\n        })\n        .catch(err => {\n            dispatch(authFail(err))\n        });\n    }\n}\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (token === undefined) {\n            dispatch(authLogout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if ( expirationDate <= new Date() ) {\n                dispatch(authLogout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(authCheckTimeout( expirationDate.getTime() - new Date().getTime()) );\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}